@page "/Register"
@using System.Text
@using System.Security.Cryptography
@using ayayay.Shared
@using Blazored.LocalStorage
@using System.Net
@using Comforix.Shared
@inject ILocalStorageService LocalStorage
@inject HttpClient HttpClient

<p>Username</p>
<input @bind="_uname"/>
<p>Password</p>
<input @bind="_pwd" type="password"/>
<button @onclick="SendToServer">Register / Send to server</button>
@if (_showSalting)
{
    <p>Processing...</p>
}
@if (_showSending)
{
    <p>Registering...</p>
}
@if (_showComplete)
{
    <p>Registered!</p>
}
@if (_showError)
{
    <p>Error: One or more fields are empty.</p>
}
@if (_showDatabaseConnectionError)
{
    <p>Error: Server could not connect with database. Please try again.</p>
}

@code {

    private string? _uname, _pwd;
    private bool _showSalting, _showSending, _showComplete, _showError, _showDatabaseConnectionError;
    private static byte[] _hash = null!;
    private static readonly SHA512 Sha512 = SHA512.Create();

    private async void SendToServer()
    {
        _showSalting = false;
        _showSending = false;
        _showComplete = false;
        _showError = false;
        _showDatabaseConnectionError = false;

        if (string.IsNullOrEmpty(_uname) || string.IsNullOrEmpty(_pwd))
        {
            _showError = true;
            return;
        }

        _showSalting = true;
        byte[] pwd = Encoding.UTF32.GetBytes(_pwd); // Convert password to byte array
        byte[] salt = GenerateSalt(); // Create salt byte array
        _hash = pwd.Concat(salt).ToArray(); // Combine password byte array and salt byte array
        await ComputeSaltedHash(); // Hash (SHA-512)

        _showSending = true;
        StateHasChanged();
        var registrationRequest = new Account
        {
            Username = _uname,
            PasswordHash = _hash,
            PasswordSalt = salt,
            Level1 = PhysicalOrEmotional.Both,
            Level2 = Issue.PreferNotToSay,
            Level3 = null
        };

    // Send to server
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("AccountApi/New", registrationRequest);
    // Bug: Database fails to connect on the first try. This is a known bug with the MySql.Data NuGet package. Re-sending the request fixes it.
        if (response.StatusCode is HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("AccountApi/New", registrationRequest);

    // In case of database error
        if (response.IsSuccessStatusCode is false)
        {
            _showDatabaseConnectionError = true;
            StateHasChanged();
        }

    // Save to local storage
        string token = (await response.Content.ReadAsStringAsync()).ToLowerInvariant();
        await LocalStorage.SetItemAsStringAsync("token", token);

    // Complete!
        _showComplete = true;
        StateHasChanged();
    }

    private static byte[] GenerateSalt()
    {
        var salt = new byte[128];
        var rng = RandomNumberGenerator.Create();
        rng.GetBytes(salt);
        return salt;
    }

    private readonly Resource _resource = new();
    private readonly CancellationTokenSource _cts = new();

    private async Task ComputeSaltedHash()
    {
        await Task.Delay(100, _cts.Token);
        _cts.Token.ThrowIfCancellationRequested();
        _resource.Compute();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _resource.Dispose();
    }

    private class Resource : IDisposable
    {
        private bool _disposed;

        public void Dispose()
        {
            if (_disposed) throw new ObjectDisposedException(nameof(Resource));
            _disposed = true;
        }

        public void Compute()
        {
            if (_disposed) throw new ObjectDisposedException(nameof(Resource));
            for (var i = 0; i < 5000; ++i) _hash = Sha512.ComputeHash(_hash);
        }
    }

}