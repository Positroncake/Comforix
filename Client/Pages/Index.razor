@page "/"
@using Comforix.Shared
@using System.Security.Cryptography
@using System.Text
@using System.Net
@using Blazored.LocalStorage
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage

<link href="https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap" rel="stylesheet" type="text/css">
<link href="https://fonts.googleapis.com/css2?family=Lexend:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Zen+Maru+Gothic:wght@500&display=swap" rel="stylesheet">

<PageTitle>Index</PageTitle>

<div class="title">
    <h1>Welcome to Comforix</h1>
</div>

<div class="centre">
    <button class="button-design" @onclick="() => { Step1Selected(PhysicalOrEmotional.Physical); }">Physical</button>
    <button class="button-design" @onclick="() => { Step1Selected(PhysicalOrEmotional.Emotional); }">Emotional</button>
    <button class="button-design" @onclick="() => { Step1Selected(PhysicalOrEmotional.Both); }">Both</button>
</div>

@if (_showStep2)
{
    <div class="centre-wrap">
        <br/>
        @if (_buttonsP.Count is not 0)
        {
            for (var i = 0; i < _buttonsP.Count; ++i)
            {
                int index = i;
                <button class="button-design-dark" style="color: @(_buttonsP[index].Selected ? "#ffffff" : "#000000"); background-color: @(_buttonsP[index].Selected ? "#0c63e4" : "#ffffff")" @onclick="() => { Step2Clicked(_buttonsP[index].PhysicalIssue, index); }">@string.Join(' ', _buttonsP[index].PhysicalIssue.ToString().Split('_'))</button>
            }
        }
        @if (_buttonsE.Count is not 0)
        {
            for (var i = 0; i < _buttonsE.Count; ++i)
            {
                int index = i;
                <button class="button-design-dark" style="color: @(_buttonsE[index].Selected ? "#ffffff" : "#000000"); background-color: @(_buttonsE[index].Selected ? "#0c63e4" : "#ffffff")" @onclick="() => { Step2Clicked(_buttonsE[index].EmotionalIssue, index); }">@string.Join(' ', _buttonsE[index].EmotionalIssue.ToString().Split('_'))</button>
            }
        }
        @if (_buttonsB.Count is not 0)
        {
            for (var i = 0; i < _buttonsB.Count; ++i)
            {
                int index = i;
                <button class="button-design-dark" style="color: @(_buttonsB[index].Selected ? "#ffffff" : "#000000"); background-color: @(_buttonsB[index].Selected ? "#0c63e4" : "#ffffff")" @onclick="() => { Step2Clicked(_buttonsB[index].Issue, index); }">@string.Join(' ', _buttonsB[index].Issue.ToString().Split('_'))</button>
            }
        }
    </div>
}

@if (_showStep3)
{
    <div class="description">
        <h1>If Prefered, Please Provide Additional Information</h1>
    </div>
    
    <div class="centre-margin-top">
        <input @bind="_description"/>
    </div>
    
    <div class="centre">
        <button class="button-design"@onclick="Step3Selected">Proceed</button>
    </div>
}
<style>
input {
  width: 10%;
    margin: 8px 0;
    box-sizing: border-box;
    
}

</style>
@if (_showStep4)
{
    
    <div class="text-center pt-md-5">
        <h2 class="text-center mb-5">Register</h2>
        <div class="d-flex flex-row justify-content-center">
            <div style="color: #000000" class="form-box">
                
                    <label for="signup-username">Username</label>
                    <input style="width: 200px"type="text"id="signup-username"/><br/><br/>
                    <label for="signup-password">Password</label>
                    <input style="width: 200px"type="password" id="signup-password"/><br/><br/>
                    
                
                    <label for="signup-display">Confirm Password</label>
                    <input style="width: 200px"type="password" id="signup-display"/><br/><br/>
                    
                   
                

                <button  class="button-design">Register!</button>
            </div>
        </div>
    </div>

}

@if (_showSalting)
{
    <p>Processing...</p>
}
@if (_showSending)
{
    <p>Registering...</p>
}
@if (_showComplete)
{
    <p>Registered!</p>
}
@if (_showError)
{
    <p>Error: One or more fields are empty.</p>
}
@if (_showDatabaseConnectionError)
{
    <p>Error: Server could not connect with database. Please try again.</p>
}

@code {

    #region Buttons (UI)

    private class ButtonP // P = physical
    {
        public PhysicalIssue PhysicalIssue { get; set; }
        public bool Selected { get; set; }
    }

    private class ButtonE // E = emotional
    {
        public EmotionalIssue EmotionalIssue { get; set; }
        public bool Selected { get; set; }
    }

    private class ButtonB // B = both
    {
        public Issue Issue { get; set; }
        public bool Selected { get; set; }
    }

    List<ButtonP> _buttonsP = new();
    List<ButtonE> _buttonsE = new();
    List<ButtonB> _buttonsB = new();
    List<ushort> _selected = new();

    #endregion

    #region Gather info

    private byte _peSelection;
    private ushort _issue;
    private bool _showStep2, _showStep3, _showStep4;
    private string _description = string.Empty;

    private void Step1Selected(PhysicalOrEmotional selection)
    {
        _buttonsP = new List<ButtonP>();
        _buttonsE = new List<ButtonE>();
        _buttonsB = new List<ButtonB>();
        _selected = new List<ushort>();

        switch (selection)
        {
            case PhysicalOrEmotional.Physical:
            {
                foreach (int i in Enum.GetValues(typeof(PhysicalIssue))) _buttonsP.Add(new ButtonP { PhysicalIssue = (PhysicalIssue)i, Selected = false });
                break;
            }
            case PhysicalOrEmotional.Emotional:
            {
                foreach (int i in Enum.GetValues(typeof(EmotionalIssue))) _buttonsE.Add(new ButtonE { EmotionalIssue = (EmotionalIssue)i, Selected = false });
                break;
            }
            case PhysicalOrEmotional.Both:
            {
                foreach (int i in Enum.GetValues(typeof(Issue))) _buttonsB.Add(new ButtonB { Issue = (Issue)i, Selected = false });
                break;
            }
            default:
                throw new ArgumentOutOfRangeException();
        }
        _peSelection = (byte)selection;
        _showStep2 = true;
    }

    private void Step2Clicked(PhysicalIssue selection, int listIndex)
    {
        if (_buttonsP[listIndex].Selected is false)
        {
            _buttonsP[listIndex].Selected = true;
            _selected.Add((ushort)selection);
            _showStep3 = true;
        }
        else
        {
            _buttonsP[listIndex].Selected = false;
            _selected.Remove((ushort)selection);
            _showStep3 = true;
        }
    }

    private void Step2Clicked(EmotionalIssue selection, int listIndex)
    {
        if (_buttonsE[listIndex].Selected is false)
        {
            _buttonsE[listIndex].Selected = true;
            _selected.Add((ushort)selection);
            _showStep3 = true;
        }
        else
        {
            _buttonsE[listIndex].Selected = false;
            _selected.Remove((ushort)selection);
            _showStep3 = true;
        }
    }

    private void Step2Clicked(Issue selection, int listIndex)
    {
        if (_buttonsB[listIndex].Selected is false)
        {
            _buttonsB[listIndex].Selected = true;
            _selected.Add((ushort)selection);
            _showStep3 = true;
        }
        else
        {
            _buttonsB[listIndex].Selected = false;
            _selected.Remove((ushort)selection);
            _showStep3 = true;
        }
    }

    private void Step3Selected()
    {
        _showStep4 = true;
    }

    #endregion

    #region Login/register

    private string? _uname, _pwd;
    private bool _showSalting, _showSending, _showComplete, _showError, _showDatabaseConnectionError;
    private static byte[] _hash = null!;
    private static readonly SHA512 Sha512 = SHA512.Create();

    private async void SendToServer()
    {
        _showSalting = false;
        _showSending = false;
        _showComplete = false;
        _showError = false;
        _showDatabaseConnectionError = false;

        if (string.IsNullOrEmpty(_uname) || string.IsNullOrEmpty(_pwd))
        {
            _showError = true;
            return;
        }

        _showSalting = true;
        byte[] pwd = Encoding.UTF32.GetBytes(_pwd); // Convert password to byte array
        byte[] salt = GenerateSalt(); // Create salt byte array
        _hash = pwd.Concat(salt).ToArray(); // Combine password byte array and salt byte array
        await ComputeSaltedHash(); // Hash (SHA-512)

        _showSending = true;
        StateHasChanged();
        var registrationRequest = new Account
        {
            Username = _uname,
            PasswordHash = _hash,
            PasswordSalt = salt,
            Level1 = _peSelection,
            Level2 = string.Format("{0}{1}{0}END", '\u001f', string.Join('\u001f', _selected)),
            Level3 = _description
        };

    // Send to server
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("AccountApi/New", registrationRequest);
    // Bug: Database fails to connect on the first try. This is a known bug with the MySql.Data NuGet package. Re-sending the request fixes it.
        if (response.StatusCode is HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("AccountApi/New", registrationRequest);

    // In case of database error
        if (response.IsSuccessStatusCode is false)
        {
            _showDatabaseConnectionError = true;
            StateHasChanged();
        }

    // Save to local storage
        string token = (await response.Content.ReadAsStringAsync()).ToLowerInvariant();
        await LocalStorage.SetItemAsStringAsync("token", token);

    // Complete!
        _showComplete = true;
        StateHasChanged();
    }

    private static byte[] GenerateSalt()
    {
        var salt = new byte[128];
        var rng = RandomNumberGenerator.Create();
        rng.GetBytes(salt);
        return salt;
    }

    private readonly Resource _resource = new();
    private readonly CancellationTokenSource _cts = new();

    private async Task ComputeSaltedHash()
    {
        await Task.Delay(100, _cts.Token);
        _cts.Token.ThrowIfCancellationRequested();
        _resource.Compute();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _resource.Dispose();
    }

    private class Resource : IDisposable
    {
        private bool _disposed;

        public void Dispose()
        {
            if (_disposed) throw new ObjectDisposedException(nameof(Resource));
            _disposed = true;
        }

        public void Compute()
        {
            if (_disposed) throw new ObjectDisposedException(nameof(Resource));
            for (var i = 0; i < 5000; ++i) _hash = Sha512.ComputeHash(_hash);
        }
    }

    #endregion

}

