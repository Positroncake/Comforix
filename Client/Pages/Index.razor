@page "/"
@using Comforix.Shared
@using System.Security.Cryptography
@using System.Text
@using System.Net
@using Blazored.LocalStorage
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<link href="https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap" rel="stylesheet" type="text/css">
<link href="https://fonts.googleapis.com/css2?family=Lexend:wght@500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Zen+Maru+Gothic:wght@500&display=swap" rel="stylesheet">

<PageTitle>Index</PageTitle>

<div style="height: 300px; background-color: #0066cc;">
    <div style="padding: 20px;">
        <p style="text-align: center;">&nbsp;</p>
        <p style="text-align: center;">&nbsp;</p>
        <h1 style="text-align: center;">
            <span style="color: #ffffff;">
                <strong>Welcome to Comforix!</strong><br/>
            </span>
        </h1>
        <p style="text-align: left;">
            <span style="color: #ffffff;">Comforix is a platform where people who go through similar mental and physical distress can connect and share their similar difficulties with each other across the globe.</span>
        </p>
        <p style="text-align: left;">&nbsp;</p>
        <p style="text-align: center;">
            <em>
                <strong>
                    <span style="color: #ffffff;">V&nbsp; V&nbsp; V&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scroll down to get started&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V&nbsp; V&nbsp; V</span>
                </strong>
            </em>
        </p>
    </div>
</div>
<div style="padding: 80px">
    <h2 style="text-align: center;">How it works</h2>
    <h4 style="text-align: right;">Creating your account</h4>
    <br/>
    <ol>
        <li>Select which issue(s) you are having down below. First, select whether it's physical, emotional, or both. You can then refine your issue by selecting one or more of our sub-categories. If your issue is not listed, please select "something else".</li>
        <li>Once you've selected your issue, a large input area will appear, allowing you to write a description of yourself and details on your issue. If you selected "something else" in the previous step, now is a good time to write what the issue is. This step is optional!</li>
        <li>We now arrive at the final step: creating your account! Pick a username for yourself - for your own privacy, please don't use your real name. If the username is taken or if something else is wrong, the website will tell you how to fix it.</li>
    </ol>
    <br/>
    <h4 style="text-align: right;">Searching for people to talk to</h4>
    <br/>
    <ol>
        <li>You've successfully made your account, and now you're ready to talk to people. Head to the "Search" page, and select whether your issue is physical, emotional, or both. Then, refine your search, just like the account creation process. Once you've selected the issues you want, hit "Apply filters".</li>
        <li>Users having the same issues as you show up, and each of them have a reputation. Everyone first starts with 9 reputation, and the higher the number is, the better. Feel free to browse through the users until you find a good match.</li>
        <li>Once you've found a match, press "Begin chat" and you should be redirected to a chat window.</li>
    </ol>
    <br/>
    <h4 style="text-align: right;">Chatting!</h4>
    <br/>
    <ol>
        <li>Comforix functions similar to a normal chat app - you type your message in to the "Input" text box at the bottom of the page and press the "Send" button. Your messages will show in blue, and the other person's messages will show in grey.</li>
        <li>Once you're done chatting, please take a moment to rate the person you just talked with by pressing one of the buttons labelled "-3" through "3". A score of -3 means you had the worst experience, while a score of 3 means you had the best experience. Voting helps combat toxicity and promotes people who are helpful.</li>
        <li>Finally, make sure to log out when you're done using our site - a security system is only as strong as its weakest link, and our security measures won't be able to do much if you leave your account exposed and unlocked.</li>
    </ol>
    <br/>
    <p style="text-align: center;">We hope you enjoy using Comforix!</p>
    <br/>
    <p style="text-align: center;">
        <span style="color: #0066cc;">
            <em>
                <strong>V&nbsp; V&nbsp; V&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scroll down to get started&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V&nbsp; V&nbsp; V</strong>
            </em>
        </span>
    </p>
</div>

<p style="text-align: center;">Select your issue:</p>
<div class="centre">
    <button class="button-design" @onclick="() => { Step1Selected(PhysicalOrEmotional.Physical); }">Physical</button>
    <button class="button-design" @onclick="() => { Step1Selected(PhysicalOrEmotional.Emotional); }">Emotional</button>
    <button class="button-design" @onclick="() => { Step1Selected(PhysicalOrEmotional.Both); }">Both</button>
</div>

@if (_showStep2)
{
    <div class="centre-wrap">
        <br/>
        @if (_buttonsP.Count is not 0)
        {
            for (var i = 0; i < _buttonsP.Count; ++i)
            {
                int index = i;
                <button class="button-design-dark" style="color: @(_buttonsP[index].Selected ? "#ffffff" : "#000000"); background-color: @(_buttonsP[index].Selected ? "#0c63e4" : "#ffffff")" @onclick="() => { Step2Clicked(_buttonsP[index].PhysicalIssue, index); }">@string.Join(' ', _buttonsP[index].PhysicalIssue.ToString().Split('_'))</button>
            }
        }
        @if (_buttonsE.Count is not 0)
        {
            for (var i = 0; i < _buttonsE.Count; ++i)
            {
                int index = i;
                <button class="button-design-dark" style="color: @(_buttonsE[index].Selected ? "#ffffff" : "#000000"); background-color: @(_buttonsE[index].Selected ? "#0c63e4" : "#ffffff")" @onclick="() => { Step2Clicked(_buttonsE[index].EmotionalIssue, index); }">@string.Join(' ', _buttonsE[index].EmotionalIssue.ToString().Split('_'))</button>
            }
        }
        @if (_buttonsB.Count is not 0)
        {
            for (var i = 0; i < _buttonsB.Count; ++i)
            {
                int index = i;
                <button class="button-design-dark" style="color: @(_buttonsB[index].Selected ? "#ffffff" : "#000000"); background-color: @(_buttonsB[index].Selected ? "#0c63e4" : "#ffffff")" @onclick="() => { Step2Clicked(_buttonsB[index].Issue, index); }">@string.Join(' ', _buttonsB[index].Issue.ToString().Split('_'))</button>
            }
        }
    </div>
}

@if (_showStep3)
{
    <div class="centre-margin-top description">
        <h2>Description/Additional information (optional):</h2>
    </div>
    <textarea class="centre" style="width: 500px; height: 200px" @bind="_description"></textarea>

    <div class="centre">
        <button class="button-design"@onclick="Step3Selected">Proceed</button>
    </div>
}
<style>
input {
  width: 10%;
    margin: 8px 0;
    box-sizing: border-box;   
}

</style>
@if (_showStep4)
{
    <div class="container">
        <label>Username</label>
        <input type="text" placeholder="Enter Username" @bind="_uname" required>
        <label>Password</label>
        <input type="password" placeholder="Enter Password" @bind="_pwd" required>
        <label>Confirm Password</label>
        <input type="password" placeholder="Confirm Password" @bind="_pwdConf" required>
        <button class="submit-btn" @onclick="SendToServer">Register!</button>
    </div>
}

@if (_showSalting)
{
    <p class="centre">Processing...</p>
}
@if (_showSending)
{
    <p class="centre">Registering...</p>
}
@if (_showComplete)
{
    <p class="centre">Registered!</p>
    <div class="centre">
        <button class="button-design" @onclick="Startup">Start looking for people!</button>
    </div>
}
@if (_showError)
{
    <p class="centre">Error: One or more fields are empty.</p>
}
@if (_showPasswordMismatchError)
{
    <p class="centre">Error: Passwords do not match.</p>
}
@if (_showDatabaseConnectionError)
{
    <p class="centre">Error: Server could not connect with database. Please try again.</p>
}
@if (_showUsernameTakenError)
{
    <p class="centre">Error: Username taken.</p>
}
@if (_showBackBtn)
{
    <div class="centre">
        <button class="button-design" @onclick="GoBack">Back</button>
    </div>
}

@code {

    #region Buttons (UI)

    private class ButtonP // P = physical
    {
        public PhysicalIssue PhysicalIssue { get; set; }
        public bool Selected { get; set; }
    }

    private class ButtonE // E = emotional
    {
        public EmotionalIssue EmotionalIssue { get; set; }
        public bool Selected { get; set; }
    }

    private class ButtonB // B = both
    {
        public Issue Issue { get; set; }
        public bool Selected { get; set; }
    }

    List<ButtonP> _buttonsP = new();
    List<ButtonE> _buttonsE = new();
    List<ButtonB> _buttonsB = new();
    List<ushort> _selected = new();

    #endregion

    #region Gather info

    private byte _peSelection;
    private ushort _issue;
    private bool _showStep2, _showStep3, _showStep4, _showBackBtn;
    private string _description = string.Empty;

    private void GoBack()
    {
        _showStep4 = true;
        _showBackBtn = false;

        _showSalting = false;
        _showSending = false;
        _showComplete = false;
        _showError = false;
        _showPasswordMismatchError = false;
        _showDatabaseConnectionError = false;
        _showUsernameTakenError = false;
    }

    private void Startup()
    {
        NavigationManager.NavigateTo("/Search", true);
    }

    private void Step1Selected(PhysicalOrEmotional selection)
    {
        _buttonsP = new List<ButtonP>();
        _buttonsE = new List<ButtonE>();
        _buttonsB = new List<ButtonB>();
        _selected = new List<ushort>();

        switch (selection)
        {
            case PhysicalOrEmotional.Physical:
            {
                foreach (int i in Enum.GetValues(typeof(PhysicalIssue))) _buttonsP.Add(new ButtonP { PhysicalIssue = (PhysicalIssue)i, Selected = false });
                break;
            }
            case PhysicalOrEmotional.Emotional:
            {
                foreach (int i in Enum.GetValues(typeof(EmotionalIssue))) _buttonsE.Add(new ButtonE { EmotionalIssue = (EmotionalIssue)i, Selected = false });
                break;
            }
            case PhysicalOrEmotional.Both:
            {
                foreach (int i in Enum.GetValues(typeof(Issue))) _buttonsB.Add(new ButtonB { Issue = (Issue)i, Selected = false });
                break;
            }
            default:
                throw new ArgumentOutOfRangeException();
        }
        _peSelection = (byte)selection;
        _showStep2 = true;
    }

    private void Step2Clicked(PhysicalIssue selection, int listIndex)
    {
        if (_buttonsP[listIndex].Selected is false)
        {
            _buttonsP[listIndex].Selected = true;
            _selected.Add((ushort)selection);
            _showStep3 = true;
        }
        else
        {
            _buttonsP[listIndex].Selected = false;
            _selected.Remove((ushort)selection);
            _showStep3 = true;
        }
    }

    private void Step2Clicked(EmotionalIssue selection, int listIndex)
    {
        if (_buttonsE[listIndex].Selected is false)
        {
            _buttonsE[listIndex].Selected = true;
            _selected.Add((ushort)selection);
            _showStep3 = true;
        }
        else
        {
            _buttonsE[listIndex].Selected = false;
            _selected.Remove((ushort)selection);
            _showStep3 = true;
        }
    }

    private void Step2Clicked(Issue selection, int listIndex)
    {
        if (_buttonsB[listIndex].Selected is false)
        {
            _buttonsB[listIndex].Selected = true;
            _selected.Add((ushort)selection);
            _showStep3 = true;
        }
        else
        {
            _buttonsB[listIndex].Selected = false;
            _selected.Remove((ushort)selection);
            _showStep3 = true;
        }
    }

    private void Step3Selected()
    {
        if (string.IsNullOrEmpty(_description)) _description = "None";
        _showStep4 = true;
    }

    #endregion

    #region Login/register

    private string? _uname, _pwd, _pwdConf;
    private bool _showSalting, _showSending, _showComplete, _showError, _showPasswordMismatchError, _showUsernameTakenError, _showDatabaseConnectionError;
    private static byte[] _hash = null!;
    private static readonly SHA512 Sha512 = SHA512.Create();

    private async void SendToServer()
    {
        _showStep4 = false;

        _showSalting = false;
        _showSending = false;
        _showComplete = false;
        _showError = false;
        _showPasswordMismatchError = false;
        _showUsernameTakenError = false;
        _showDatabaseConnectionError = false;

    // Check for empty fields
        if (string.IsNullOrEmpty(_uname) || string.IsNullOrEmpty(_pwd) || string.IsNullOrEmpty(_pwdConf))
        {
            _showError = true;
            _showBackBtn = true;
            return;
        }

    // Check for password mismatch
        if (_pwd.Equals(_pwdConf) is false)
        {
            _showPasswordMismatchError = true;
            _showBackBtn = true;
            return;
        }

        _showSalting = true;
        byte[] pwd = Encoding.UTF32.GetBytes(_pwd); // Convert password to byte array
        byte[] salt = GenerateSalt(); // Create salt byte array
        _hash = pwd.Concat(salt).ToArray(); // Combine password byte array and salt byte array
        await ComputeSaltedHash(); // Hash (SHA-512)

        _showSending = true;
        StateHasChanged();
        var registrationRequest = new Account
        {
            Username = _uname,
            PasswordHash = _hash,
            PasswordSalt = salt,
            Level1 = _peSelection,
            Level2 = string.Format("{0}{1}{0}END", '\u001f', string.Join('\u001f', _selected)),
            Level3 = _description
        };

    // Send to server
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("AccountApi/New", registrationRequest);
    // Bug: Database fails to connect on the first try. This is a known bug with the MySql.Data NuGet package. Re-sending the request fixes it.
        if (response.StatusCode is HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("AccountApi/New", registrationRequest);

    // In case of database error
    // ReSharper disable once ConvertIfStatementToSwitchStatement
        if (response.StatusCode is HttpStatusCode.InternalServerError)
        {
            _showDatabaseConnectionError = true;
            _showBackBtn = true;
            StateHasChanged();
            return;
        }

    // In case of taken username
        if (response.StatusCode is HttpStatusCode.Conflict)
        {
            _showUsernameTakenError = true;
            _showBackBtn = true;
            StateHasChanged();
            return;
        }

    // Save to local storage
        string token = (await response.Content.ReadAsStringAsync()).ToLowerInvariant();
        await LocalStorage.SetItemAsStringAsync("token", token);

    // Complete!
        _showComplete = true;
        StateHasChanged();
    }

    private static byte[] GenerateSalt()
    {
        var salt = new byte[128];
        var rng = RandomNumberGenerator.Create();
        rng.GetBytes(salt);
        return salt;
    }

    private readonly Resource _resource = new();
    private readonly CancellationTokenSource _cts = new();

    private async Task ComputeSaltedHash()
    {
        await Task.Delay(100, _cts.Token);
        _cts.Token.ThrowIfCancellationRequested();
        _resource.Compute();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _resource.Dispose();
    }

    private class Resource : IDisposable
    {
        private bool _disposed;

        public void Dispose()
        {
            if (_disposed) throw new ObjectDisposedException(nameof(Resource));
            _disposed = true;
        }

        public void Compute()
        {
            if (_disposed) throw new ObjectDisposedException(nameof(Resource));
            for (var i = 0; i < 5000; ++i) _hash = Sha512.ComputeHash(_hash);
        }
    }

    #endregion

}